CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(MagicMirror)

OPTION(WITH_DEBUG "whether to build with debug" ON)
OPTION(PRINT_TIME "whether to print time" ON)
OPTION(USE_CPP11 "whether to use cpp11" ON)
OPTION(BUILD_LIBRARY "whether to build library" OFF)
OPTION(USE_THREAD "whether to use thread" ON)

IF(WITH_DEBUG)
    IF(CMAKE_HOST_SYSTEM_NAME MATCHES Linux)
        SET(CXX_COMPLIER_FLAG "-g -Wall")
        MESSAGE(STATUS "YOU COMPLIE THE CODE WITH DEBUG!!")
    ENDIF()
ELSE()
    MESSAGE(STATUS "YOU COMPLIE THE CODE WITHOUT DEBUG!")
ENDIF()


IF(PRINT_TIME)
    ADD_DEFINITIONS(-DPRINT_TIME)
    MESSAGE(STATUS "YOU SELECT PRINT TIME!")
ELSE()
    MESSAGE(STATUS "YOU NOT SELECT PRINT TIME!")
ENDIF()

IF(USE_CPP11)
    IF(CMAKE_HOST_SYSTEM_NAME MATCHES Linux)
        SET(CPP11_ENABLED_FLAGS "-std=c++11")
        MESSAGE(STATUS "USE C++11!")
    ENDIF()
ENDIF()

IF(USE_THREAD)
    IF(CMAKE_HOST_SYSTEM_NAME MATCHES Linux)
        SET(CXX_FLAGS_THREAD "-lpthread")
        MESSAGE(STATUS "USR THREAD")
    ENDIF()
ENDIF()

##########SET COMPLIER FLAG AND PATH##########
SET(CMAKE_CXX_FLAGS "${CXX_COMPLIER_FLAG} ${CPP11_ENABLED_FLAGS} ${CXX_FLAGS_THREAD}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
SET(LINUX_TOOLCHAIN_ROOT /usr/bin)
SET(CMAKE_CXX_COMPLIER "${LINUX_TOOLCHAIN_ROOT}/g++")
MESSAGE(STATUS "C++ COMPLIER: ${CMAKE_CXX_COMPLIER}")

##########SET LIBRARY AND HEAD FILE PATH##########
SET(PROJECT_INCLUDE_PATH ${PROJECT_SOURCE_DIR}/include)
MESSAGE(STATUS "PROJECT_INCLUDE_PATH: ${PROJECT_INCLUDE_PATH}")
SET(PROJECT_LIBRARY_PATH ${PROJECT_SOURCE_DIR}/library)
MESSAGE(STATUS "PROJECT_LIBRARY_PATH: ${PROJECT_LIBRARY_PATH}")

INCLUDE_DIRECTORIES(${PROJECT_INCLUDE_PATH})
MESSAGE(STATUS "INCLUDE PATH: ${PROJECT_INCLUDE_PATH}")
LINK_DIRECTORIES(${PROJECT_LIBRARY_PATH})
MESSAGE(STATUS "LIBRARY PATH: ${PROJECT_LIBRARY_PATH}")

##########################SET LIBRARY#######################
SET(THREAD_LIB pthread)
MESSAGE(STATUS "MagicMirror:  ${THREAD_LIB}")

########################SET SOURCE FILES#######################
SET(PROJECT_SOURCE_PATH ${PROJECT_SOURCE_DIR}/src)
SET(SRC_LIST ${PROJECT_SOURCE_PATH}/Channel.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/ChannelMap.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/Clock.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/Epoller.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/EventLoop.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/EventMap.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/Mutex.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/Thread.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/Timer.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/TimerEventSystem.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/TimerQueue.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/Timestamp.cc)
SET(SRC_LIST ${SRC_LIST} ${PROJECT_SOURCE_PATH}/GuiResources.cc)
MESSAGE(STATUS "SOURCE PATH:  ${SRC_LIST}")

######################SET LIBRAYR LINK#####################
IF(BUILD_LIBRARY)
    ADD_LIBRARY(TIMER SHARED ${SRC_LIST})
    TARGET_LINK_LIBRARIES(TIMER ${THREAD_LIB})
ENDIF()

######################SET TARGET###################
FIND_PACKAGE(OpenCV REQUIRED)
INCLUDE_DIRECTORIES(${OpenCV_INCLDUE_DIRS})
ADD_EXECUTABLE(MagicMirror ${PROJECT_SOURCE_PATH}/Main.cc ${SRC_LIST})
TARGET_LINK_LIBRARIES(MagicMirror ${OpenCV_LIBS} ${THREAD_LIB})

